import java.io.*;
import java.nio.file.*;
import java.util.ArrayList;

public class BuyerManualTest {

    private static final String TEST_BUYER_FILE = "BuyerList.txt";
    private static final String TEST_AUCTION_FILE = "AuctionList.txt";
    private static final String TEST_SELLER_FILE = "SellerList.txt";

    public static void main(String[] args) throws IOException {
        setup();

        run("CreateBuyer", BuyerManualTest::testCreateBuyerWritesToFile);
        run("SetPassword", BuyerManualTest::testSetPasswordUpdatesFile);
        run("SendMessage", BuyerManualTest::testSendMessageToSellerStoresMessages);
        run("MakeBid", BuyerManualTest::testMakeBidUpdatesAuctionFile);
        run("RateSeller", BuyerManualTest::testRateSellerUpdatesRating);
        run("DeleteAccount", BuyerManualTest::testDeleteAccountDeactivatesBuyer);
    }

    
    @FunctionalInterface
    interface TestCase {
        void run() throws Exception;
    }

   
    static void run(String testName, TestCase test) {
        try {
            test.run();
            System.out.println("[PASS] " + testName);
        } catch (Exception e) {
            System.out.println("[FAIL] " + testName + " â€“ " + e.getMessage());
        }
    }

  
    static void setup() throws IOException {
        Files.write(Paths.get(TEST_BUYER_FILE), new byte[0]);
        Files.write(Paths.get(TEST_AUCTION_FILE), "item1,item,desc,cat,time,price,none,0\n".getBytes());
        Files.write(Paths.get(TEST_SELLER_FILE), "seller1,4.0,2\n".getBytes());
    }

   
    static void testCreateBuyerWritesToFile() throws IOException {
        Buyer buyer = new Buyer("testUser", "testPass");
        String content = Files.readString(Paths.get(TEST_BUYER_FILE));
        if (!content.contains("testUser,testPass")) throw new AssertionError("Buyer not found in file");
    }

    static void testSetPasswordUpdatesFile() throws IOException {
        Buyer buyer = new Buyer("testUser2", "oldPass");
        buyer.setPassword("newPass");
        String content = Files.readString(Paths.get(TEST_BUYER_FILE));
        if (!content.contains("testUser2,newPass")) throw new AssertionError("Password not updated in file");
    }

    static void testSendMessageToSellerStoresMessages() {
        Buyer buyer = new Buyer("buyer1", "pass");
        buyer.sendMessageToSeller("seller1", "Hello!");
        ArrayList<String> messages = buyer.getMessages("buyer1");

        if (!messages.contains("seller1") || !messages.contains("Hello!"))
            throw new AssertionError("Messages not stored properly");
    }

    static void testMakeBidUpdatesAuctionFile() throws IOException {
        Buyer buyer = new Buyer("buyer1", "pass");
        buyer.makeBid("item1", 99.99);
        String content = Files.readString(Paths.get(TEST_AUCTION_FILE));
        if (!content.contains("buyer1,99.99")) throw new AssertionError("Bid not updated");
    }

    static void testRateSellerUpdatesRating() throws IOException {
        Buyer buyer = new Buyer("buyer1", "pass");
        buyer.rateSeller("seller1", 5.0);
        String content = Files.readString(Paths.get(TEST_SELLER_FILE));
        if (!content.contains("3")) throw new AssertionError("Rating count not updated");
    }

    static void testDeleteAccountDeactivatesBuyer() {
        Buyer buyer = new Buyer("buyer1", "pass");
        buyer.deleteAccount();
        if (buyer.isActive()) throw new AssertionError("Account not deactivated");
    }
}
